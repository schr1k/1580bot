import asyncio
import locale
import logging
from datetime import datetime
from re import fullmatch

from aiogram import Bot, Dispatcher, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.types import CallbackQuery, FSInputFile, Message
from redis.asyncio import Redis

from src.bot import kb
from src.bot.db import DB
from src.funcs import *
from src.bot.states import *
from src.main import create_schedule

locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

db = DB()
config = Config()

redis = Redis(
    host=config.REDIS_HOST,
    port=config.REDIS_PORT,
    db=config.REDIS_DB
)
storage = RedisStorage(redis)

bot = Bot(config.TOKEN)
dp = Dispatcher(storage=storage)

weekdays = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']

logging.basicConfig(filename="all.log", level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(filename)s function: %(funcName)s line: %(lineno)d - %(message)s')
errors = logging.getLogger("errors")
errors.setLevel(logging.ERROR)
fh = logging.FileHandler("errors.log")
formatter = logging.Formatter(
    '%(asctime)s - %(levelname)s - %(filename)s function: %(funcName)s line: %(lineno)d - %(message)s')
fh.setFormatter(formatter)
errors.addHandler(fh)


# –ì–ª–∞–≤–Ω–∞—è ==============================================================================================================
@dp.message(Command('start'))
async def start(message: Message, state: FSMContext):
    await state.clear()
    if not await db.user_exists(str(message.from_user.id)):
        await db.new_user(str(message.from_user.id), message.from_user.username)
    name = message.from_user.username if message.from_user.username is not None else message.from_user.first_name
    keyboard = kb.staff_main_kb if await db.staff_exists(str(message.from_user.id)) else kb.user_main_kb
    now = datetime.now()
    month_day = now.strftime("%d")[1] if now.strftime("%d")[0] == '0' else now.strftime("%d")
    await message.answer(f'üëã –ü—Ä–∏–≤–µ—Ç, {name}.\n'
                         f'üìÜ –°–µ–≥–æ–¥–Ω—è <b>{now.strftime("%A")}</b>, {month_day} {now.strftime("%b")}.\n',
                         reply_markup=keyboard, parse_mode='HTML')


@dp.callback_query(F.data == 'to_main')
async def call_start(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.clear()
    name = call.from_user.username if call.from_user.username is not None else call.from_user.first_name
    keyboard = kb.staff_main_kb if await db.staff_exists(str(call.from_user.id)) else kb.user_main_kb
    now = datetime.now()
    month_day = now.strftime("%d")[1] if now.strftime("%d")[0] == '0' else now.strftime("%d")
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text=f'üëã –ü—Ä–∏–≤–µ—Ç, {name}.\n'
                                     f'üìÜ –°–µ–≥–æ–¥–Ω—è <b>{now.strftime("%A")}</b>, {month_day} {now.strftime("%b")}.\n',
                                reply_markup=keyboard, parse_mode='HTML')


# –ü–æ–º–æ—â—å ===============================================================================================================
@dp.message(Command('help'))
async def help(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f'/start - –ù–∞ –≥–ª–∞–≤–Ω—É—é.\n\n'
                         f'–ü—Ä–∏–∫–æ–ª—ã:\n'
                         f'/dice - –∫—É–±–∏–∫.\n'
                         f'/slot - —Å–ª–æ—Ç—ã.\n'
                         f'/football - —Ñ—É—Ç–±–æ–ª.\n'
                         f'/basketball - –±–∞—Å–∫–µ—Ç–±–æ–ª.\n'
                         f'/bowling - –±–æ—É–ª–∏–Ω–≥.\n'
                         f'/darts - –¥–∞—Ä—Ç—Å.\n\n'
                         f'–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n'
                         f'@schr1k - <b>CEO, CTO, CIO, Founder, TeamLead, –ì–ª–∞–≤–Ω—ã–π –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</b>.\n'
                         f'@hxllmvdx - <i>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</i>.', reply_markup=kb.to_main_kb, parse_mode='HTML')


# –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ==================================================================================================
@dp.callback_query(F.data == 'get_student_schedule')
async def get_student_schedule(call: CallbackQuery, state: FSMContext):
    await call.answer()
    keyboard = kb.group_button(await db.get_group(str(call.from_user.id))) if await db.user_is_registered(
        str(call.from_user.id)) else kb.to_main_kb
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 11—Å1).', reply_markup=keyboard)
    await state.set_state(GetStudentSchedule.group)


@dp.message(GetStudentSchedule.group)
async def student_weekday(message: Message, state: FSMContext):
    if fullmatch(r'\d{1,2}[–∞-—è–ê-–Ø]\d?', message.text):
        if message.text in get_schedule().keys():
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.', reply_markup=kb.student_week_kb(message.text.lower()))
            await state.clear()
        else:
            await message.answer('–ö–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')


@dp.callback_query(F.data.split('-')[0] == 'group_button')
async def call_student_weekday(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.',
                                reply_markup=kb.student_week_kb(call.data.split('-')[1].lower()))
    await state.clear()


@dp.callback_query(F.data.split('-')[0] == 'student')
async def get_student_weekday_schedule(call: CallbackQuery):
    await call.answer()
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text=get_students_day_schedule(call.data.split('-')[2].lower(),
                                                               call.data.split('-')[1]), parse_mode='HTML',
                                reply_markup=kb.to_student_schedule_kb(call.data.split('-')[2].lower()))


# –ù–∞–π—Ç–∏ —É—á–∏—Ç–µ–ª—è ========================================================================================================
@dp.callback_query(F.data == 'find_teacher')
async def find_teacher(call: CallbackQuery, state: FSMContext):
    await call.answer()
    keyboard = kb.teacher_button(await db.get_teacher(str(call.from_user.id))) if await db.get_teacher(
        str(call.from_user.id)) is not None else kb.to_main_kb
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text='–í–≤–µ–¥–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª—ã —É—á–∏—Ç–µ–ª—è.\n'
                                     '–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ 3 —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞:\n'
                                     '1) –ü–æ–ª–Ω–æ–µ –§–ò–û (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á).\n'
                                     '2) –§–∞–º–∏–ª–∏—è –∏ –∏–º—è (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω).\n'
                                     '3) –§–∞–º–∏–ª–∏—è (–ò–≤–∞–Ω–æ–≤).\n'
                                     '<b>–†–µ–≥–∏—Å—Ç—Ä –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è</b>.', parse_mode='HTML',
                                reply_markup=keyboard)
    await state.set_state(FindTeacher.teacher)


@dp.message(FindTeacher.teacher)
async def teacher_info(message: Message, state: FSMContext):
    flag = False
    n = 0
    teachers = get_teachers()
    if len(message.text.split()) == 3:
        surname, name, patronymic = message.text.split()
        for i, j in teachers.items():
            if surname.lower() == j['surname'].lower() and name.lower() == j['name'].lower() and patronymic.lower() == j['patronymic'].lower():
                flag = True
                n = i
                break
    elif len(message.text.split()) == 2:
        surname, name = message.text.split()
        for i, j in teachers.items():
            if surname.lower() == j['surname'].lower() and name.lower() == j['name'].lower():
                flag = True
                n = i
                break
    elif len(message.text.split()) == 1:
        surname = message.text
        for i, j in teachers.items():
            if surname.lower() == j['surname'].lower():
                flag = True
                n = i
                break
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
        return
    if flag:
        text = f'<b>{teachers[n]["surname"]} {teachers[n]["name"]} {teachers[n]["patronymic"]}</b>\n\n<i>–ü–æ—á—Ç–∞:</i> {teachers[n]["email"]}.\n'
        if teachers[n]['subject'] is not None:
            text += f'<i>–ó–∞–Ω–∏–º–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</i> {teachers[n]["subject"]}.'
        if teachers[n]["photo"]:
            photo = FSInputFile(f'public/photo/photo/{n}.jpg')
            await message.answer_photo(photo=photo, caption=text, parse_mode='HTML',
                                       reply_markup=kb.teacher_schedule_kb(message.text.split()[0].capitalize()))
        else:
            await message.answer(text=text, parse_mode='HTML',
                                 reply_markup=kb.teacher_schedule_kb(message.text.split()[0].capitalize()))
        await state.clear()
    else:
        await message.answer('–£—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')


@dp.callback_query(F.data.split('-')[0] == 'teacher_button')
async def call_teacher_info(call: CallbackQuery):
    await call.answer()
    flag = False
    n = 0
    teachers = get_teachers()
    surname = call.data.split('-')[1]
    for i, j in teachers.items():
        if surname.lower() == j['surname'].lower():
            flag = True
            n = i
            break
    if not flag:
        await call.message.answer(text='–£—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò–∑–º–µ–Ω–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —É—á–∏—Ç–µ–ª—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ.',
                                  reply_markup=kb.to_main_kb)
    text = f'<b>{teachers[n]["surname"]} {teachers[n]["name"]} {teachers[n]["patronymic"]}</b>\n\n<i>–ü–æ—á—Ç–∞:</i> {teachers[n]["email"]}.\n'
    if teachers[n]['subject'] is not None:
        text += f'<i>–ó–∞–Ω–∏–º–∞–µ–º–∞—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å:</i> {teachers[n]["subject"]}.'
    if teachers[n]["photo"]:
        photo = FSInputFile(f'public/photo/photo/{n}.jpg')
        await call.message.answer_photo(photo=photo, caption=text, parse_mode='HTML',
                                        reply_markup=kb.teacher_schedule_kb(call.data.split('-')[1]))
    else:
        await call.message.answer(text=text, parse_mode='HTML',
                                  reply_markup=kb.teacher_schedule_kb(call.data.split('-')[1]))


@dp.callback_query(F.data.split('-')[0] == 'teacher_schedule')
async def teacher_weekdays(call: CallbackQuery):
    await call.answer()
    await call.message.delete()
    await call.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.',
                              reply_markup=kb.teacher_week_kb(call.data.split('-')[1]))


@dp.callback_query(F.data.split('-')[0] == 'teacher')
async def get_teacher_schedule(call: CallbackQuery):
    await call.answer()
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text=get_teachers_day_schedule(call.data.split('-')[2], call.data.split('-')[1]),
                                parse_mode='HTML', reply_markup=kb.to_teacher_schedule_kb(call.data.split('-')[2]))


# –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é ======================================================================================================
@dp.callback_query(F.data == 'suggest_idea')
async def suggest_idea(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text='–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏–ª–∏ —à–∫–æ–ª—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ —Å—é–¥–∞ (–ø–æ–∫–∞ —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è <b>—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ</b>).',
                                parse_mode='HTML', reply_markup=kb.to_main_kb)
    await state.set_state(SuggestIdea.idea)


@dp.message(SuggestIdea.idea)
async def set_idea(message: Message, state: FSMContext):
    sender = f'@{message.from_user.username}' if message.from_user.username is not None else message.from_user.id
    if message.photo is not None:
        if await db.user_is_registered(str(message.from_user.id)):
            await bot.send_photo(chat_id=config.IDEAS_GROUP_ID, photo=message.photo[-1].file_id,
                                 caption=f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - {sender}.\n'
                                         f'–°–æ–æ–±—â–µ–Ω–∏–µ - {message.caption}.\n'
                                         f'–ö–æ—Ä–ø—É—Å - {await db.get_building(str(message.from_user.id))}.\n'
                                         f'–ö–ª–∞—Å—Å - {await db.get_group(str(message.from_user.id))}.',
                                 reply_markup=kb.idea_kb)
        else:
            await bot.send_photo(chat_id=config.IDEAS_GROUP_ID, photo=message.photo[-1].file_id,
                                 caption=f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - {sender}.\n'
                                         f'–°–æ–æ–±—â–µ–Ω–∏–µ - {message.caption}.', reply_markup=kb.idea_kb)
        await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!', reply_markup=kb.to_main_kb)
        await state.clear()
    elif message.text is not None:
        if await db.user_is_registered(str(message.from_user.id)):
            await bot.send_message(chat_id=config.IDEAS_GROUP_ID, text=f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - {sender}.\n'
                                                                       f'–°–æ–æ–±—â–µ–Ω–∏–µ - {message.text}.\n'
                                                                       f'–ö–æ—Ä–ø—É—Å - {await db.get_building(str(message.from_user.id))}.\n'
                                                                       f'–ö–ª–∞—Å—Å - {await db.get_group(str(message.from_user.id))}.',
                                   reply_markup=kb.idea_kb)
        else:
            await bot.send_message(chat_id=config.IDEAS_GROUP_ID, text=f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - {sender}.\n'
                                                                       f'–°–æ–æ–±—â–µ–Ω–∏–µ - {message.text}.',
                                   reply_markup=kb.idea_kb)
        await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!', reply_markup=kb.to_main_kb)
        await state.clear()
    else:
        await message.answer(text='–≠—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.')


@dp.callback_query(F.data.split('-')[0] == 'approve_idea')
async def approve_idea(call: CallbackQuery):
    await call.answer()
    if call.message.photo is not None:
        await bot.send_photo(chat_id=config.APPROVED_IDEAS_GROUP_ID, photo=call.message.photo[-1].file_id,
                             caption=f'{call.message.caption}')
        await bot.edit_message_caption(message_id=call.message.message_id, chat_id=config.IDEAS_GROUP_ID,
                                       caption=f'{call.message.caption}\n'
                                               f'–ò–¥–µ—è –æ–¥–æ–±—Ä–µ–Ω–∞.')
    elif call.message.text is not None:
        await bot.send_message(chat_id=config.APPROVED_IDEAS_GROUP_ID, text=f'{call.message.text}')
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=config.IDEAS_GROUP_ID,
                                    text=f'{call.message.text}\n'
                                         f'–ò–¥–µ—è –æ–¥–æ–±—Ä–µ–Ω–∞.')
    else:
        await bot.send_message(chat_id=call.from_user.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


# –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ ===================================================================================================
@dp.callback_query(F.data == 'report_bug')
async def report_bug(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text='–ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É –∏–ª–∏ –Ω–µ–¥–æ—á–µ—Ç –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –æ–± —ç—Ç–æ–º (–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á—Ç–æ–±—ã –º—ã –ø–æ–Ω–∏–º–∞–ª–∏ –≥–¥–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞).',
                                parse_mode='HTML', reply_markup=kb.to_main_kb)
    await state.set_state(ReportBug.bug)


@dp.message(ReportBug.bug)
async def set_bug(message: Message, state: FSMContext):
    sender = f'@{message.from_user.username}' if message.from_user.username is not None else message.from_user.id
    if message.photo is not None:
        if await db.user_is_registered(str(message.from_user.id)):
            await bot.send_photo(chat_id=config.BUGS_GROUP_ID, photo=message.photo[-1].file_id,
                                 caption=f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - {sender}.\n'
                                         f'–°–æ–æ–±—â–µ–Ω–∏–µ - {message.caption}.\n'
                                         f'–ö–æ—Ä–ø—É—Å - {await db.get_building(str(message.from_user.id))}.\n'
                                         f'–ö–ª–∞—Å—Å - {await db.get_group(str(message.from_user.id))}.',
                                 reply_markup=kb.bug_kb(str(message.from_user.id)))
        else:
            await bot.send_photo(chat_id=config.BUGS_GROUP_ID, photo=message.photo[-1].file_id,
                                 caption=f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - {sender}.\n'
                                         f'–°–æ–æ–±—â–µ–Ω–∏–µ - {message.caption}.',
                                 reply_markup=kb.bug_kb(str(message.from_user.id)))
        await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!\n'
                                  '–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º –∫–æ–≥–¥–∞ –æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.', reply_markup=kb.to_main_kb)
        await state.clear()
    elif message.text is not None:
        if await db.user_is_registered(str(message.from_user.id)):
            await bot.send_message(chat_id=config.BUGS_GROUP_ID, text=f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - {sender}.\n'
                                                                      f'–°–æ–æ–±—â–µ–Ω–∏–µ - {message.text}.\n'
                                                                      f'–ö–æ—Ä–ø—É—Å - {await db.get_building(str(message.from_user.id))}.\n'
                                                                      f'–ö–ª–∞—Å—Å - {await db.get_group(str(message.from_user.id))}.',
                                   reply_markup=kb.bug_kb(str(message.from_user.id)))
        else:
            await bot.send_message(chat_id=config.BUGS_GROUP_ID, text=f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - {sender}.\n'
                                                                      f'–°–æ–æ–±—â–µ–Ω–∏–µ - {message.text}.',
                                   reply_markup=kb.bug_kb(str(message.from_user.id)))
        await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!\n'
                                  '–ú—ã —Å–æ–æ–±—â–∏–º –≤–∞–º –∫–æ–≥–¥–∞ –æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.', reply_markup=kb.to_main_kb)
        await state.clear()
    else:
        await message.answer(text='–≠—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.')


@dp.callback_query(F.data.split('-')[0] == 'fix_bug')
async def fix_bug(call: CallbackQuery):
    await call.answer()
    if call.message.photo is not None:
        await bot.send_message(chat_id=call.data.split('-')[1],
                               text='–û—à–∏–±–∫–∞, –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–∞–ª–∏, –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.')
        await bot.edit_message_caption(message_id=call.message.message_id, chat_id=config.BUGS_GROUP_ID,
                                       caption=f'{call.message.caption}\n'
                                               f'–ë–∞–≥ –ø–æ—Ñ–∏–∫—à–µ–Ω.')
    elif call.message.text is not None:
        await bot.send_message(chat_id=call.data.split('-')[1],
                               text='–û—à–∏–±–∫–∞, –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–∞–ª–∏, –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.')
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=config.BUGS_GROUP_ID,
                                    text=f'{call.message.text}\n'
                                         f'–ë–∞–≥ –ø–æ—Ñ–∏–∫—à–µ–Ω.')
    else:
        await bot.send_message(chat_id=call.from_user.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


@dp.callback_query(F.data.split('-')[0] == 'reject_bug')
async def reject_bug(call: CallbackQuery):
    await call.answer()
    if call.message.photo is not None:
        await bot.send_message(chat_id=call.data.split('-')[1],
                               text='–û—à–∏–±–∫–∞, –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–∞–ª–∏, –Ω–µ –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.\n'
                                    '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–Ω—è–ª–∏ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—à–∏–±–∫–∞.\n'
                                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.')
        await bot.edit_message_caption(message_id=call.message.message_id, chat_id=config.BUGS_GROUP_ID,
                                       caption=f'{call.message.caption}\n'
                                               f'–ë–∞–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω.')
    elif call.message.text is not None:
        await bot.send_message(chat_id=call.data.split('-')[1],
                               text='–û—à–∏–±–∫–∞, –æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–∞–ª–∏, –Ω–µ –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞.\n'
                                    '–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –ø–æ–Ω—è–ª–∏ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ—à–∏–±–∫–∞.\n'
                                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç.')
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=config.BUGS_GROUP_ID,
                                    text=f'{call.message.text}\n'
                                         f'–ë–∞–≥ –æ—Ç–∫–ª–æ–Ω–µ–Ω.')
    else:
        await bot.send_message(chat_id=call.from_user.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')


# –ü—Ä–æ—Ñ–∏–ª—å ==============================================================================================================
@dp.callback_query(F.data == 'profile')
async def profile(call: CallbackQuery):
    await call.answer()
    building = await db.get_building(str(call.from_user.id))
    group = await db.get_group(str(call.from_user.id))
    teacher = await db.get_teacher(str(call.from_user.id))
    if await db.user_is_registered(str(call.from_user.id)):
        text = (f'–í–∞—à –∫–æ—Ä–ø—É—Å - {building if building is not None else "–ù–µ —É–∫–∞–∑–∞–Ω"}.\n'
                f'–í–∞—à –∫–ª–∞—Å—Å - {group if group is not None else "–ù–µ —É–∫–∞–∑–∞–Ω"}.\n'
                f'–í–∞—à —É—á–∏—Ç–µ–ª—å - {teacher if teacher is not None else "–ù–µ —É–∫–∞–∑–∞–Ω"}.')
        keyboard = kb.filled_profile_kb
    else:
        text = '–ï—Å–ª–∏ –≤—ã —É—á–µ–Ω–∏–∫ —à–∫–æ–ª—ã ‚Ññ 1580, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –≤–≤–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∫–æ—Ä–ø—É—Å–∞.'
        keyboard = kb.unfilled_profile_kb
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id, text=text,
                                reply_markup=keyboard)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ==========================================================================================================
@dp.callback_query(F.data == 'registration')
async def registration(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–æ—Ä–ø—É—Å.', reply_markup=kb.buildings_kb)
    await state.set_state(Registration.building)


@dp.callback_query(Registration.building)
async def set_registration_building(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(building=call.data.split('-')[1])
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 11—Å1).')
    await state.set_state(Registration.group)


@dp.message(Registration.group)
async def set_registration_group(message: Message, state: FSMContext):
    data = await state.get_data()
    schedule = get_schedule()
    if not bool(fullmatch(r'\d{1,2}[–∞-—è–ê-–Ø]\d?', message.text)):
        await message.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
    elif schedule[message.text.lower()]['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫']['1']['building'] != data['building']:
        await message.answer(text='–≠—Ç–æ—Ç –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
    else:
        await state.update_data(group=message.text)
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è\n'
                                  '<b>–†–µ–≥–∏—Å—Ç—Ä –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è</b>.',
                             parse_mode='HTML')
        await state.set_state(Registration.teacher)


@dp.message(Registration.teacher)
async def set_registration_teacher(message: Message, state: FSMContext):
    if len(message.text.split(' ')) != 1:
        await message.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
    teachers = get_teachers()
    flag = False
    surname = message.text
    for i, j in teachers.items():
        if surname.lower() == j['surname'].lower():
            flag = True
            break
    if not flag:
        await message.answer(text='–£—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
    await state.update_data(teacher=message.text.capitalize())
    data = await state.get_data()
    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.',
        reply_markup=kb.to_main_kb)
    await db.edit_group(str(message.from_user.id), data['group'])
    await db.edit_building(str(message.from_user.id), data['building'])
    await db.edit_teacher(str(message.from_user.id), data['teacher'])
    await state.clear()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ =====================================================================================================
@dp.callback_query(F.data == 'change_group')
async def change_group(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 11—Å1).', reply_markup=kb.to_main_kb)
    await state.set_state(ChangeGroup.group)


@dp.message(ChangeGroup.group)
async def set_group(message: Message, state: FSMContext):
    schedule = get_schedule()
    if not fullmatch(r'\d{1,2}[–∞-—è–ê-–Ø]\d?', message.text):
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
    elif schedule[message.text]['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫']['1']['building'] != await db.get_building(str(message.from_user.id)):
        await message.answer('–≠—Ç–æ—Ç –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
    else:
        await message.answer('–ö–ª–∞—Å—Å –∏–∑–º–µ–Ω–µ–Ω.', reply_markup=kb.to_main_kb)
        await db.edit_group(str(message.from_user.id), message.text)
        await state.clear()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞ ====================================================================================================
@dp.callback_query(F.data == 'change_building')
async def change_building(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–æ—Ä–ø—É—Å.', reply_markup=kb.buildings_kb)
    await state.set_state(ChangeBuilding.building)


@dp.callback_query(ChangeBuilding.building)
async def set_building(call: CallbackQuery, state: FSMContext):
    await bot.send_message(call.from_user.id, '–ö–æ—Ä–ø—É—Å –∏–∑–º–µ–Ω–µ–Ω.', reply_markup=kb.to_main_kb)
    await db.edit_building(str(call.from_user.id), call.data.split('-')[1])
    await state.clear()


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è =====================================================================================
@dp.callback_query(F.data == 'change_teacher')
async def change_teacher(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text='–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è\n'
                                     '<b>–†–µ–≥–∏—Å—Ç—Ä –ø—Ä–∏ –≤–≤–æ–¥–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è</b>.',
                                parse_mode='HTML')
    await state.set_state(ChangeTeacher.teacher)


@dp.message(ChangeTeacher.teacher)
async def set_teacher(message: Message, state: FSMContext):
    if len(message.text.split(' ')) != 1:
        await message.answer(text='–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
    teachers = get_teachers()
    flag = False
    surname = message.text
    for i, j in teachers.items():
        if surname.lower() == j['surname'].lower():
            flag = True
            break
    if not flag:
        await message.answer(text='–£—á–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
    await db.edit_teacher(str(message.from_user.id), message.text.capitalize())
    await message.answer('–ö–ª–∞—Å—Å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω.', reply_markup=kb.to_main_kb)
    await state.clear()


# –®–∫–æ–ª–∞ ================================================================================================================
@dp.callback_query(F.data == 'school')
async def school(call: CallbackQuery):
    await call.answer()
    await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                text='–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ —à–∫–æ–ª—ã: 09:00 - 17:30 (–æ–±–µ–¥ 13:15 - 13:45).',
                                reply_markup=kb.school_kb)


# –ü–∏—Ç–∞–Ω–∏–µ ==============================================================================================================
@dp.callback_query(F.data == 'food')
async def food(call: CallbackQuery):
    await call.answer()
    await call.message.delete()
    await call.message.answer(text='–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã —Å—Ç–æ–ª–æ–≤–æ–π:\n'
                                   '<b>09:00 - 14:15</b>.\n'
                                   '–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã –±—É—Ñ–µ—Ç–∞:\n'
                                   '<b>09:00 ‚Äì 15:45</b>.', reply_markup=kb.food_kb, parse_mode='HTML')


# –ú–µ–Ω—é =================================================================================================================
@dp.callback_query(F.data.split('-')[0] == 'menu')
async def menu(call: CallbackQuery):
    await call.answer()
    photo = FSInputFile(f'public/photo/food/{call.data.split("-")[1]}.jpg')
    await call.message.answer_photo(photo=photo, reply_markup=kb.to_food_kb)
    await call.message.delete()


# –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ ===========================================================================================================
@dp.callback_query(F.data == 'library')
async def library(call: CallbackQuery):
    await call.answer()
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text='–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ì–ë–û–£ "–ë–∞—É–º–∞–Ω—Å–∫–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω–∞—è —à–∫–æ–ª–∞ ‚Ññ 1580" –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —à–∫–æ–ª—ã –≤ 1989 –≥–æ–¥—É. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–æ–Ω–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15 318 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, —Ñ–æ–Ω–¥ —É—á–µ–±–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã ‚Äì 84 257 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∏–∑–¥–∞–Ω–∏—è. –ó–∞–≤–µ–¥—É—é—â–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π - –°—Ç—Ä–µ–∫–∞–ª–æ–≤–∞ –ú–∞—Ä–∏–Ω–∞ –ë–æ—Ä–∏—Å–æ–≤–Ω–∞.',
                                reply_markup=kb.library_kb)


@dp.callback_query(F.data == 'library_1')
async def library_1(call: CallbackQuery):
    await call.answer()
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text='–ê–¥—Ä–µ—Å: –ë–∞–ª–∞–∫–ª–∞–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 6–∞ (1 —ç—Ç–∞–∂, –∫–∞–±. 116).\n'
                                     '–¢–µ–ª–µ—Ñ–æ–Ω: 8(495)316-50-36.\n'
                                     '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 09:00 - 17:00. –ü–Ω - –ü—Ç.', reply_markup=kb.to_library_kb)


@dp.callback_query(F.data == 'library_2')
async def library_2(call: CallbackQuery):
    await call.answer()
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text='–ê–¥—Ä–µ—Å: –ë–∞–ª–∞–∫–ª–∞–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, –¥. 6 (1 —ç—Ç–∞–∂, –∫–∞–±. 104).\n'
                                     '–¢–µ–ª–µ—Ñ–æ–Ω: 8(499)619-39-35.\n'
                                     '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 09:00 - 17:00. –ü–Ω - –ü—Ç.', reply_markup=kb.to_library_kb)


@dp.callback_query(F.data == 'library_3')
async def library_3(call: CallbackQuery):
    await call.answer()
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text='–ê–¥—Ä–µ—Å: —É–ª. –°—Ç–∞—Å–æ–≤–æ–π, –¥. 8 (4 —ç—Ç–∞–∂, –∫–∞–±. 418).\n'
                                     '–¢–µ–ª–µ—Ñ–æ–Ω: 8(495)954-34-95.\n'
                                     '–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 09:00 - 17:00. –ü–Ω - –ü—Ç.', reply_markup=kb.to_library_kb)


# –ó–≤–æ–Ω–∫–∏ ===============================================================================================================
@dp.callback_query(F.data == 'lessons')
async def lessons(call: CallbackQuery):
    await call.answer()
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text='0 —É—Ä–æ–∫: 08:15 - 08:55.\n'
                                     '1 —É—Ä–æ–∫: 09:00 - 09:40.\n'
                                     '2 —É—Ä–æ–∫: 09:50 - 10:30.\n'
                                     '3 —É—Ä–æ–∫: 10:45 - 11:25.\n'
                                     '4 —É—Ä–æ–∫: 11:40 - 12:20.\n'
                                     '5 —É—Ä–æ–∫: 12:40 - 13:20.\n'
                                     '6 —É—Ä–æ–∫: 13:40 - 14:20.\n'
                                     '7 —É—Ä–æ–∫: 14:40 - 15:20.\n'
                                     '8 —É—Ä–æ–∫: 15:30 - 16:10.', reply_markup=kb.to_school_kb)


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å =========================================================================================================
@dp.callback_query(lambda call: call.data == 'admin_panel')
async def admin_panel(call: CallbackQuery):
    await call.answer()
    keyboard = kb.admin_kb if await db.get_role(str(call.from_user.id)) == 'admin' else kb.newsman_kb
    text = ''
    if await db.get_role(str(call.from_user.id)) == 'admin':
        role = '–∞–¥–º–∏–Ω'
        text += (f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ - <b>{await db.count_users()}</b>.\n'
                 f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ - <b>{await db.count_registered_users()}</b>.\n'
                 f'–†–∞–±–æ—Ç–Ω–∏–∫–æ–≤ - <b>{await db.count_staff()}</b>.\n')
    else:
        role = '–Ω–æ–≤–æ—Å—Ç–Ω–∏–∫'
    text += f'–í–∞—à–∞ —Ä–æ–ª—å - <b>{role}</b>.'
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text=text,
                                reply_markup=keyboard, parse_mode='HTML')


# –†–∞—Å—Å—ã–ª–∫–∞ =============================================================================================================
@dp.callback_query(lambda call: call.data == 'news')
async def message_all(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', reply_markup=kb.to_admin_panel_kb)
    await state.set_state(News.message)


@dp.message(News.message)
async def set_message(message: Message, state: FSMContext):
    await state.update_data(message=message.text)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.', reply_markup=kb.news_kb)
    await state.set_state(News.target)


@dp.callback_query(News.target)
async def set_target(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(target=call.data.split("-")[1])
    data = await state.get_data()
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text=f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:\n'
                                     f'–¢–µ–∫—Å—Ç - {data["message"]}\n'
                                     f'–ö–æ—Ä–ø—É—Å–∞ - {call.data.split("-")[1] if call.data.split("-")[1].isnumeric() else "–≤—Å–µ (–≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞)"}.',
                                reply_markup=kb.submit_kb)
    await state.set_state(News.submit)


@dp.callback_query(News.submit)
async def set_submit(call: CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    if data['target'].isnumeric():
        message_list = await db.get_users_by_building(data['target'])
    else:
        message_list = await db.get_all_users()
    for user in message_list:
        await bot.send_message(user, data['message'])
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', reply_markup=kb.to_admin_panel_kb)
    await state.clear()


# –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ ==========================================================================================================
@dp.callback_query(lambda call: call.data == 'give_role')
async def give_role(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                text='–í–≤–µ–¥–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å',
                                reply_markup=kb.to_admin_panel_kb)
    await state.set_state(GiveRole.id)


@dp.message(GiveRole.id)
async def set_id(message: Message, state: FSMContext):
    if message.text in await db.get_all_users():
        await state.update_data(id=message.text)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å.', reply_markup=kb.roles_kb)
        await state.set_state(GiveRole.role)
    else:
        await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ. –í–≤–µ–¥–∏—Ç–µ id –µ—â–µ —Ä–∞–∑.',
                             reply_markup=kb.to_admin_panel_kb)


@dp.callback_query(GiveRole.role)
async def set_role(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(role=call.data)
    data = await state.get_data()
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text='–†–æ–ª—å –≤—ã–¥–∞–Ω–∞.',
                                reply_markup=kb.to_admin_panel_kb)
    if await db.staff_exists(data['id']):
        await db.edit_role(data['id'], data['role'], await db.get_username_by_tg(data['id']))
    else:
        await db.new_staff(data['id'], data['role'], await db.get_username_by_tg(data['id']))
    await state.clear()


# –ö—É–±–∏–∫ ================================================================================================================
@dp.message(Command('dice'))
async def dice(message: Message):
    await message.answer_dice(emoji='üé≤')


# –°–ª–æ—Ç =================================================================================================================
@dp.message(Command('slot'))
async def slot(message: Message):
    await message.answer_dice(emoji='üé∞')


# –§—É—Ç–±–æ–ª ===============================================================================================================
@dp.message(Command('football'))
async def football(message: Message):
    await message.answer_dice(emoji='‚öΩÔ∏è')


# –ë–∞—Å–∫–µ—Ç–±–æ–ª ============================================================================================================
@dp.message(Command('basketball'))
async def basketball(message: Message):
    await message.answer_dice(emoji='üèÄ')


# –ë–æ—É–ª–∏–Ω–≥ ==============================================================================================================
@dp.message(Command('bowling'))
async def bowling(message: Message):
    await message.answer_dice(emoji='üé≥')


# –î–∞—Ä—Ç—Å ================================================================================================================
@dp.message(Command('darts'))
async def dart(message: Message):
    await message.answer_dice(emoji='üéØ')


# –û–±–µ–∑—å—è–Ω–∞ =============================================================================================================
@dp.message(Command('monkey'))
async def monkey(message: Message):
    await message.answer_sticker('CAACAgIAAxkBAAEKc5dlHbxb-RpsaSAfgBqoQ9RE7NECXQACLA4AAns60UqyOUfKre3y0zAE')


# –ü–µ—Ç—Ä–∏–∫–æ–≤–∞ ============================================================================================================
@dp.message(Command('petrikova'))
async def petrikova(message: Message):
    await message.answer_sticker('CAACAgIAAxkBAAEKdgxlHv4_ah2jwxqOVFWLghHRluQw4QAC0ygAArOsIEoJKU_WVCW3gTAE')


# 52 ===================================================================================================================
@dp.message(Command('52'))
async def fiftytwo(message: Message):
    photo = FSInputFile('public/photo/mems/52.jpg')
    await message.answer_photo(photo=photo, caption='Yeei')


# –ò–Ω–≤–∞–ª–∏–¥ =============================================================================================================
@dp.message(Command('invalid'))
async def invalid(message: Message):
    photo = FSInputFile('public/photo/mems/invalid.jpg')
    await message.answer_photo(photo=photo)


# –î–∂–∞–∫—É–∑–∏ ==============================================================================================================
@dp.message(Command('jacuzzi'))
async def jacuzzi(message: Message):
    photo = FSInputFile('public/photo/mems/jacuzzi.jpg')
    await message.answer_photo(photo=photo)


# –®—Ä—ç–∫ =================================================================================================================
@dp.message(Command('shrek'))
async def shrek(message: Message):
    photo = FSInputFile('public/photo/mems/shrek.jpg')
    await message.answer_photo(photo=photo)


# id ===================================================================================================================
@dp.message(Command('id'))
async def ids(message: Message):
    await message.answer(str(message.from_user.id))


# group id =============================================================================================================
@dp.message(Command('gid'))
async def gids(message: Message):
    await message.answer(str(message.chat.id))


# command_exception ====================================================================================================
@dp.message()
async def command_exception(message: Message):
    if str(message.chat.id) not in [config.IDEAS_GROUP_ID, config.APPROVED_IDEAS_GROUP_ID, config.BUGS_GROUP_ID]:
        await message.answer('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')


async def main():
    try:
        await db.connect()
        await asyncio.create_task(create_schedule())
        print(f'–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ({datetime.now().strftime("%H:%M:%S %d.%m.%Y")}).')
        await dp.start_polling(bot)
    except Exception as e:
        errors.error(e)


if __name__ == '__main__':
    asyncio.run(main())
