import asyncio
import logging
import locale
from threading import Thread
from re import fullmatch
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Message, CallbackQuery
from aiogram.filters.command import Command

from bot.db import DB
from bot import config, kb
from bot.states import *
from bot.funcs import *

from excel.main import start_scheduler

locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')

db = DB()

bot = Bot(config.TOKEN)
dp = Dispatcher(storage=MemoryStorage())

weekdays = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"]

logging.basicConfig(filename="all.log", level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(filename)s function: %(funcName)s line: %(lineno)d - %(message)s')
errors = logging.getLogger("errors")
errors.setLevel(logging.ERROR)
fh = logging.FileHandler("errors.log")
formatter = logging.Formatter(
    '%(asctime)s - %(levelname)s - %(filename)s function: %(funcName)s line: %(lineno)d - %(message)s')
fh.setFormatter(formatter)
errors.addHandler(fh)

with open(config.SCHEDULE_PATH, encoding='utf-8') as f:
    schedule = json.load(f)


# –ì–ª–∞–≤–Ω–∞—è ==============================================================================================================
@dp.message(Command('start'))
async def start(message: Message, state: FSMContext):
    try:
        await state.clear()
        if not await db.user_exists(str(message.from_user.id)):
            await db.new_user(str(message.from_user.id), message.from_user.username)
        name = message.from_user.username if message.from_user.username is not None else message.from_user.first_name
        keyboard = kb.staff_main_kb if await db.staff_exists(str(message.from_user.id)) else kb.user_main_kb
        now = datetime.now()
        month_day = now.strftime("%d")[1] if now.strftime("%d")[0] == '0' else now.strftime("%d")
        await message.answer(f'üëã –ü—Ä–∏–≤–µ—Ç, {name}.\n'
                             f'üìÜ –°–µ–≥–æ–¥–Ω—è <b>{now.strftime("%A")}</b>, {month_day} {now.strftime("%b")}.\n',
                             reply_markup=keyboard, parse_mode='HTML')
    except Exception as e:
        errors.error(e)


@dp.callback_query(F.data == 'to_main')
async def call_start(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        await state.clear()
        name = call.from_user.username if call.from_user.username is not None else call.from_user.first_name
        keyboard = kb.staff_main_kb if await db.staff_exists(str(call.from_user.id)) else kb.user_main_kb
        now = datetime.now()
        month_day = now.strftime("%d")[1] if now.strftime("%d")[0] == '0' else now.strftime("%d")
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text=f'üëã –ü—Ä–∏–≤–µ—Ç, {name}.\n'
                                         f'üìÜ –°–µ–≥–æ–¥–Ω—è <b>{now.strftime("%A")}</b>, {month_day} {now.strftime("%b")}.\n',
                                    reply_markup=keyboard, parse_mode='HTML')
    except Exception as e:
        errors.error(e)


# –ü–æ–º–æ—â—å ==============================================================================================================
@dp.message(Command('help'))
async def help(message: Message, state: FSMContext):
    try:
        await state.clear()
        await message.answer(f'/start - –ù–∞ –≥–ª–∞–≤–Ω—É—é.\n\n'
                             f'–ü—Ä–∏–∫–æ–ª—ã:\n'
                             f'/dice - –∫—É–±–∏–∫.\n'
                             f'/slot - —Å–ª–æ—Ç—ã.\n'
                             f'/football - —Ñ—É—Ç–±–æ–ª.\n'
                             f'/basketball - –±–∞—Å–∫–µ—Ç–±–æ–ª.\n'
                             f'/bowling - –±–æ—É–ª–∏–Ω–≥.\n'
                             f'/darts - –¥–∞—Ä—Ç—Å.\n\n'
                             f'–ö–æ–Ω—Ç–∞–∫—Ç—ã:\n'
                             f'@schr1k - <b>CEO, CTO, CIO, Founder, TeamLead, –ì–ª–∞–≤–Ω—ã–π –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</b>.\n'
                             f'@hxllmvdx - <i>—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫</i>.', reply_markup=kb.to_main_kb, parse_mode='HTML')
    except Exception as e:
        errors.error(e)


# –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ==================================================================================================
@dp.callback_query(F.data == 'get_student_schedule')
async def get_student_schedule(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        keyboard = kb.group_button(await db.get_class(str(call.from_user.id))) if await db.user_is_registered(
            str(call.from_user.id)) else kb.to_main_kb
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 11—Å1).', reply_markup=keyboard)
        await state.set_state(GetStudentSchedule.group)
    except Exception as e:
        errors.error(e)


@dp.callback_query(GetStudentSchedule.group)
async def set_student_group(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        await state.update_data(group=call.data.split('-')[1].lower())
        await bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.', reply_markup=kb.student_week_kb)
        await state.set_state(GetStudentSchedule.weekday)
    except Exception as e:
        errors.error(e)


@dp.message(GetStudentSchedule.group)
async def set_student_group(message: Message, state: FSMContext):
    try:
        if fullmatch(r'\d{1,2}[–∞-—è–ê-–Ø]\d?', message.text):
            await state.update_data(group=message.text.lower())
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.', reply_markup=kb.student_week_kb)
            await state.set_state(GetStudentSchedule.weekday)
        else:
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
    except Exception as e:
        errors.error(e)


@dp.callback_query(GetStudentSchedule.weekday)
@dp.callback_query(F.data.split('-')[0] == 'student')
async def set_student_weekday(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        data = await state.get_data()
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text=get_student_day_schedule(data['group'], call.data.split('-')[1]),
                                    parse_mode='HTML', reply_markup=kb.to_main_kb)
        await state.clear()
    except Exception as e:
        errors.error(e)


# –ù–∞–π—Ç–∏ —É—á–∏—Ç–µ–ª—è ========================================================================================================
@dp.callback_query(F.data == 'get_teacher_schedule')
async def get_teacher_schedule(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text='–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é —É—á–∏—Ç–µ–ª—è.', reply_markup=kb.to_main_kb)
        await state.set_state(GetTeacherSchedule.teacher_surname)
    except Exception as e:
        errors.error(e)


@dp.message(GetTeacherSchedule.teacher_surname)
async def set_teacher_surname(message: Message, state: FSMContext):
    try:
        await state.update_data(teacher=message.text)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏.', reply_markup=kb.teacher_week_kb)
        await state.set_state(GetTeacherSchedule.weekday)
    except Exception as e:
        errors.error(e)


@dp.callback_query(GetTeacherSchedule.weekday)
@dp.callback_query(F.data.split('-')[0] == 'teacher')
async def set_teacher_weekday(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        data = await state.get_data()
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text=get_teachers_day_schedule(data['teacher'].capitalize(),
                                                                   call.data.split('-')[1]),
                                    parse_mode='HTML', reply_markup=kb.to_main_kb)
        await state.clear()
    except Exception as e:
        errors.error(e)


# –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é ======================================================================================================
@dp.callback_query(F.data == 'suggest_idea')
async def suggest_idea(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text='–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞ –∏–ª–∏ —à–∫–æ–ª—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–µ —Å—é–¥–∞ (–ø–æ–∫–∞ —á—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è <b>—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ</b>).',
                                    parse_mode='HTML', reply_markup=kb.to_main_kb)
        await state.set_state(SuggestIdea.idea)
    except Exception as e:
        errors.error(e)


@dp.message(SuggestIdea.idea)
async def set_idea(message: Message, state: FSMContext):
    try:
        if message.photo is not None:
            await bot.send_photo(chat_id=config.IDEAS_GROUP_ID, photo=message.photo[-1].file_id,
                                 caption=f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - @{message.from_user.username}\n'
                                         f'–°–æ–æ–±—â–µ–Ω–∏–µ - {message.caption}',
                                 reply_markup=kb.idea_kb)
            await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!', reply_markup=kb.to_main_kb)
            await state.clear()
        elif message.text is not None:
            await bot.send_message(chat_id=config.IDEAS_GROUP_ID, text=f'–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - @{message.from_user.username}\n'
                                                                       f'–°–æ–æ–±—â–µ–Ω–∏–µ - {message.text}',
                                   reply_markup=kb.idea_kb)
            await message.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!', reply_markup=kb.to_main_kb)
            await state.clear()
        else:
            await message.answer(text='–≠—Ç–æ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.')
    except Exception as e:
        errors.error(e)


@dp.callback_query(F.data.split('-')[0] == 'approve_idea')
async def approve_idea(call: CallbackQuery):
    try:
        await call.answer()
        if call.message.photo is not None:
            await bot.send_photo(chat_id=config.APPROVED_IDEAS_GROUP_ID, photo=call.message.photo[-1].file_id,
                                 caption=f'{call.message.caption}')
            await bot.edit_message_caption(message_id=call.message.message_id, chat_id=config.IDEAS_GROUP_ID,
                                           caption='–ò–¥–µ—è –æ–¥–æ–±—Ä–µ–Ω–∞.')
        elif call.message.text is not None:
            await bot.send_message(chat_id=config.APPROVED_IDEAS_GROUP_ID, text=f'{call.message.text}')
            await bot.edit_message_text(message_id=call.message.message_id, chat_id=config.IDEAS_GROUP_ID,
                                        text='–ò–¥–µ—è –æ–¥–æ–±—Ä–µ–Ω–∞.')
        else:
            await bot.send_message(chat_id=call.from_user.id, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')
    except Exception as e:
        errors.error(e)


# –ü—Ä–æ—Ñ–∏–ª—å ==============================================================================================================
@dp.callback_query(F.data == 'profile')
async def profile(call: CallbackQuery):
    try:
        await call.answer()
        if await db.user_is_registered(str(call.from_user.id)):
            text = (f'–í–∞—à –∫–æ—Ä–ø—É—Å - {await db.get_building(str(call.from_user.id))}.\n'
                    f'–í–∞—à –∫–ª–∞—Å—Å - {await db.get_class(str(call.from_user.id))}.')
            keyboard = kb.filled_profile_kb
        else:
            text = '–ï—Å–ª–∏ –≤—ã —É—á–µ–Ω–∏–∫ —à–∫–æ–ª—ã ‚Ññ 1580, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –Ω–µ –≤–≤–æ–¥–∏—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–º–µ—Ä –∫–ª–∞—Å—Å–∞ –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –∫–æ—Ä–ø—É—Å–∞.'
            keyboard = kb.unfilled_profile_kb
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text=text, reply_markup=keyboard)
    except Exception as e:
        errors.error(e)


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ==========================================================================================================
@dp.callback_query(F.data == 'registration')
async def registration(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–æ—Ä–ø—É—Å.', reply_markup=kb.buildings_kb)
        await state.set_state(Registration.building)
    except Exception as e:
        errors.error(e)


@dp.callback_query(Registration.building)
async def set_registration_building(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        await state.update_data(building=call.data.split('-')[1])
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 11—Å1).')
        await state.set_state(Registration.group)
    except Exception as e:
        errors.error(e)


@dp.message(Registration.group)
async def set_registration_group(message: Message, state: FSMContext):
    try:
        await state.update_data(group=message.text)
        data = await state.get_data()
        if not fullmatch(r'\d{1,2}[–∞-—è–ê-–Ø]\d?', message.text):
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
        elif schedule[data['group']]['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫']['1']['building'] != data['building']:
            await message.answer('–≠—Ç–æ—Ç –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
        else:
            await message.answer(
                '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤ –æ–¥–∏–Ω –∫–ª–∏–∫.',
                reply_markup=kb.to_main_kb)
            await db.edit_group(str(message.from_user.id), data['group'])
            await db.edit_building(str(message.from_user.id), data['building'])
            await state.clear()
    except Exception as e:
        errors.error(e)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ =====================================================================================================
@dp.callback_query(F.data == 'change_group')
async def change_group(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 11—Å1).', reply_markup=kb.to_main_kb)
        await state.set_state(ChangeGroup.group)
    except Exception as e:
        errors.error(e)


@dp.message(ChangeGroup.group)
async def set_group(message: Message, state: FSMContext):
    try:
        if not fullmatch(r'\d{1,2}[–∞-—è–ê-–Ø]\d?', message.text):
            await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
        elif schedule[message.text]['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫']['1']['building'] != await db.get_building(str(message.from_user.id)):
            await message.answer('–≠—Ç–æ—Ç –∫–ª–∞—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.')
        else:
            await message.answer('–ö–ª–∞—Å—Å –∏–∑–º–µ–Ω–µ–Ω.', reply_markup=kb.to_main_kb)
            await db.edit_group(str(message.from_user.id), message.text)
            await state.clear()
    except Exception as e:
        errors.error(e)


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—Ä–ø—É—Å–∞ ====================================================================================================
@dp.callback_query(F.data == 'change_building')
async def change_building(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        await bot.edit_message_text(message_id=call.message.message_id, chat_id=call.from_user.id,
                                    text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–æ—Ä–ø—É—Å.', reply_markup=kb.buildings_kb)
        await state.set_state(ChangeBuilding.building)
    except Exception as e:
        errors.error(e)


@dp.callback_query(ChangeBuilding.building)
async def set_building(call: CallbackQuery, state: FSMContext):
    try:
        await bot.send_message(call.from_user.id, '–ö–æ—Ä–ø—É—Å –∏–∑–º–µ–Ω–µ–Ω.', reply_markup=kb.to_main_kb)
        await db.edit_building(str(call.from_user.id), call.data.split('-')[1])
        await state.clear()
    except Exception as e:
        errors.error(e)


# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å =========================================================================================================
@dp.callback_query(lambda call: call.data == 'admin_panel')
async def admin_panel(call: CallbackQuery):
    try:
        await call.answer()
        keyboard = kb.admin_kb if await db.get_role(str(call.from_user.id)) == 'admin' else kb.newsman_kb
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ - {await db.count_users()}.', reply_markup=keyboard)
    except Exception as e:
        errors.error(e)


# –†–∞—Å—Å—ã–ª–∫–∞ =============================================================================================================
@dp.callback_query(lambda call: call.data == 'news')
async def message_all(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', reply_markup=kb.to_admin_panel_kb)
        await state.set_state(News.message)
    except Exception as e:
        errors.error(e)


@dp.message(News.message)
async def set_message(message: Message, state: FSMContext):
    try:
        await state.update_data(message=message.text)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.', reply_markup=kb.news_kb)
        await state.set_state(News.target)
    except Exception as e:
        errors.error(e)


@dp.callback_query(News.target)
async def set_target(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        data = await state.get_data()
        await state.update_data(target=call.data.split('-')[1])
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text=f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è:\n'
                                         f'–¢–µ–∫—Å—Ç - {data["message"]}.\n'
                                         f'–ö–æ—Ä–ø—É—Å–∞ - {data["target"] if data["target"].isnumeric() else "–≤—Å–µ"}.',
                                    reply_markup=kb.submit_kb)
        await state.set_state(News.submit)
    except Exception as e:
        errors.error(e)


@dp.callback_query(News.submit)
async def set_submit(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        data = await state.get_data()
        if data['target'].isnumeric():
            message_list = await db.get_users_by_building(data['target'])
        else:
            message_list = await db.get_all_users()
        for user in message_list:
            await bot.send_message(user, data['message'])
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.', reply_markup=kb.to_admin_panel_kb)
        await state.clear()
    except Exception as e:
        errors.error(e)


# –í—ã–¥–∞—á–∞ —Ä–æ–ª–∏ ==========================================================================================================
@dp.callback_query(lambda call: call.data == 'give_role')
async def give_role(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–í–≤–µ–¥–∏—Ç–µ id —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —Ä–æ–ª—å',
                                    reply_markup=kb.to_admin_panel_kb)
        await state.set_state(GiveRole.id)
    except Exception as e:
        errors.error(e)


@dp.message(GiveRole.id)
async def set_id(message: Message, state: FSMContext):
    try:
        if message.text in await db.get_all_users():
            await state.update_data(id=message.text)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å.', reply_markup=kb.roles_kb)
            await state.set_state(GiveRole.role)
        else:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–æ—Ç–µ. –í–≤–µ–¥–∏—Ç–µ id –µ—â–µ —Ä–∞–∑.',
                                 reply_markup=kb.to_admin_panel_kb)
    except Exception as e:
        errors.error(e)


@dp.callback_query(GiveRole.role)
async def set_role(call: CallbackQuery, state: FSMContext):
    try:
        await state.update_data(role=call.data)
        data = await state.get_data()
        await call.answer()
        await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id,
                                    text='–†–æ–ª—å –≤—ã–¥–∞–Ω–∞.', reply_markup=kb.to_admin_panel_kb)
        if await db.staff_exists(data['id']):
            await db.edit_role(data['id'], data['role'])
        else:
            await db.new_staff(data['id'], data['role'])
        await state.clear()
    except Exception as e:
        errors.error(e)


# –ö—É–±–∏–∫ ================================================================================================================
@dp.message(Command('dice'))
async def dice(message: Message):
    try:
        await message.answer_dice(emoji='üé≤')
    except Exception as e:
        errors.error(e)


# –°–ª–æ—Ç =================================================================================================================
@dp.message(Command('slot'))
async def slot(message: Message):
    try:
        await message.answer_dice(emoji='üé∞')
    except Exception as e:
        errors.error(e)


# –§—É—Ç–±–æ–ª ================================================================================================================
@dp.message(Command('football'))
async def football(message: Message):
    try:
        await message.answer_dice(emoji='‚öΩÔ∏è')
    except Exception as e:
        errors.error(e)


# –ë–∞—Å–∫–µ—Ç–±–æ–ª ================================================================================================================
@dp.message(Command('basketball'))
async def basketball(message: Message):
    try:
        await message.answer_dice(emoji='üèÄ')
    except Exception as e:
        errors.error(e)


# –ë–æ—É–ª–∏–Ω–≥ ================================================================================================================
@dp.message(Command('bowling'))
async def bowling(message: Message):
    try:
        await message.answer_dice(emoji='üé≥')
    except Exception as e:
        errors.error(e)


# –î–∞—Ä—Ç—Å ================================================================================================================
@dp.message(Command('darts'))
async def dart(message: Message):
    try:
        await message.answer_dice(emoji='üéØ')
    except Exception as e:
        errors.error(e)


# –û–±–µ–∑—å—è–Ω–∞ =============================================================================================================
@dp.message(Command('monkey'))
async def monkey(message: Message):
    try:
        await message.answer_sticker('CAACAgIAAxkBAAEKc5dlHbxb-RpsaSAfgBqoQ9RE7NECXQACLA4AAns60UqyOUfKre3y0zAE')
    except Exception as e:
        errors.error(e)


# –ü–µ—Ç—Ä–∏–∫–æ–≤–∞ ============================================================================================================
@dp.message(Command('petrikova'))
async def petrikova(message: Message):
    try:
        await message.answer_sticker('CAACAgIAAxkBAAEKdgxlHv4_ah2jwxqOVFWLghHRluQw4QAC0ygAArOsIEoJKU_WVCW3gTAE')
    except Exception as e:
        errors.error(e)


# 52 ===================================================================================================================
@dp.message(Command('52'))
async def fiftytwo(message: Message):
    try:
        photo = FSInputFile(f'mems/52.jpg')
        await message.answer_photo(photo=photo, caption='Yeei')
    except Exception as e:
        errors.error(e)


# –ò–Ω–≤–∞–ª–∏–¥ =============================================================================================================
@dp.message(Command('invalid'))
async def invalid(message: Message):
    try:
        photo = FSInputFile(f'mems/invalid.jpg')
        await message.answer_photo(photo=photo)
    except Exception as e:
        errors.error(e)


# –ß—É–ø–∞-—á—É–ø—Å ============================================================================================================
@dp.message(Command('chupachups'))
async def chupachups(message: Message):
    try:
        photo = FSInputFile(f'mems/chupachups.jpg')
        await message.answer_photo(photo=photo)
    except Exception as e:
        errors.error(e)


# id ===================================================================================================================
@dp.message(Command('id'))
async def ids(message: Message):
    try:
        await message.answer(str(message.from_user.id))
    except Exception as e:
        errors.error(e)


# group id =============================================================================================================
@dp.message(Command('gid'))
async def gids(message: Message):
    try:
        await message.answer(str(message.chat.id))
    except Exception as e:
        errors.error(e)


# all ==================================================================================================================
@dp.message()
async def all(message: Message):
    try:
        if str(message.chat.id) not in [config.IDEAS_GROUP_ID, config.APPROVED_IDEAS_GROUP_ID]:
            await message.answer('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.')
    except Exception as e:
        errors.error(e)


async def main():
    await db.connect()
    Thread(target=start_scheduler).start()
    await dp.start_polling(bot)


if __name__ == '__main__':
    print('–†–∞–±–æ—Ç–∞–µ–º')
    asyncio.run(main())
